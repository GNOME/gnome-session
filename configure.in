AC_INIT([gnome-session], [2.16.2],
        [http://bugzilla.gnome.org/enter_bug.cgi?product=gnome-session])
AC_CONFIG_SRCDIR([gnome-session])
AM_INIT_AUTOMAKE
AM_CONFIG_HEADER(config.h)

AM_MAINTAINER_MODE

IT_PROG_INTLTOOL([0.35.0])

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AM_PROG_LIBTOOL
AC_PATH_PROGS(PATH_TO_XRDB, "xrdb")
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

dnl make sure we keep ACLOCAL_FLAGS around for maintainer builds to work
AC_SUBST(ACLOCAL_AMFLAGS, "\${ACLOCAL_FLAGS}")

GNOME_COMPILE_WARNINGS(yes)

AC_ARG_ENABLE(deprecations,
              [AC_HELP_STRING([--enable-deprecations],
                              [warn about deprecated usages [default=no]])],,
              [enable_deprecations=no])

if test "x$enable_deprecations" = "xyes"; then
   DISABLE_DEPRECATED_CFLAGS="\
-DG_DISABLE_DEPRECATED \
-DGDK_DISABLE_DEPRECATED \
-DGTK_DISABLE_DEPRECATED \
-DGDK_PIXBUF_DISABLE_DEPRECATED \
-DGNOME_DISABLE_DEPRECATED"
   AC_SUBST(DISABLE_DEPRECATED_CFLAGS)
fi

dnl If you add a version number here, you *must* add an AC_SUBST line for
dnl it too, or it will never make it into the spec file!

ESOUND_REQUIRED=0.2.26
LIBGNOMEUI_REQUIRED=2.2.0
GTK_REQUIRED=2.3.1
DBUS_GLIB_REQUIRED=0.35
GNOME_KEYRING_REQUIRED=0.5.1

AC_SUBST(ESOUND_REQUIRED)
AC_SUBST(LIBGNOMEUI_REQUIRED)

dnl pkg-config dependency checks

PKG_PROG_PKG_CONFIG()

dnl We first check for esound and audiofile (which has conditional
dnl support built in)

AC_MSG_CHECKING([whether ESounD support is requested])
AC_ARG_ENABLE([esd],
	AS_HELP_STRING([--enable-esd],[Enable ESounD (default=yes)]),
	[enable_esd=$enableval],
	[enable_esd=yes])
AC_MSG_RESULT([$enable_esd])

if test x$enable_esd = xyes; then
	ESOUND_MODULE="esound >= $ESOUND_REQUIRED"
	PKG_CHECK_MODULES(ESOUND, $ESOUND_MODULE)
	AC_DEFINE(HAVE_ESD, 1, [Define if you have the ESound Daemon])

	ESDSERVERDIR=`$PKG_CONFIG --variable=esd_serverdir esound`
	old_path=$PATH
	if test x"$ESDSERVERDIR" != x; then
		PATH=$ESDSERVERDIR:$PATH
	fi

	AC_PATH_PROG(ESD_SERVER, esd, no)
	if test x"$ESD_SERVER" = xno; then
		AC_MSG_ERROR([esd executable not found in your path - should be installed with ESound])
	fi

	AC_SUBST(ESD_SERVER)
	PATH=$old_path

else
	ESOUND_MODULE=""
fi

PKG_CHECK_MODULES(GNOME_SESSION, gtk+-2.0 >= $GTK_REQUIRED libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED $ESOUND_MODULE gnome-desktop-2.0 dbus-glib-1 >= $DBUS_GLIB_REQUIRED gnome-settings-daemon gnome-keyring-1 >= $GNOME_KEYRING_REQUIRED)

dnl Check if libnotify is present

LIBNOTIFY_REQUIRED=0.2.1
LIBNOTIFY_CFLAGS=
LIBNOTIFY_LIBS=
PKG_CHECK_MODULES(LIBNOTIFY, libnotify >= $LIBNOTIFY_REQUIRED,
	          HAVE_LIBNOTIFY="yes", HAVE_LIBNOTIFY="no")

if test "x$HAVE_LIBNOTIFY" = "xyes"; then
        AC_DEFINE(HAVE_LIBNOTIFY, 1, [libnotify available])
        AC_MSG_RESULT(available)
else
        AC_MSG_RESULT(no)
fi

AC_SUBST(LIBNOTIFY_CFLAGS)
AC_SUBST(LIBNOTIFY_LIBS)

dnl gconf checks
AC_PATH_PROG(GCONFTOOL, gconftool-2, no)

if test x"$GCONFTOOL" = xno; then
  AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
fi

AM_GCONF_SOURCE_2

# gconf-sanity-check
GCONF_SERVERDIR=`$PKG_CONFIG --variable=gconf_serverdir gconf-2.0`
old_path=$PATH
if test x"$GCONF_SERVERDIR" != x; then
   PATH=$GCONF_SERVERDIR:$PATH
fi

AC_PATH_PROG(GCONF_SANITY_CHECK, gconf-sanity-check-2, no)
if test x"$GCONF_SANITY_CHECK" = xno; then
  AC_MSG_ERROR([gconf-sanity-check-2 executable not found in your path - should be installed with GConf])
fi

AC_SUBST(GCONF_SANITY_CHECK)
PATH=$old_path
	
AC_PATH_PROG(GNOME_KEYRING_DAEMON, gnome-keyring-daemon, no)
if test x"$GNOME_KEYRING_DAEMON" = xno; then
  AC_MSG_ERROR([gnome-keyring-daemon executable not found in your path - should be installed with gnome-keyring])
fi
	
AC_SUBST(GNOME_KEYRING_DAEMON)

dnl X development libraries check

#
# If Pango included the shared library dependencies from X11 in
# the pkg-config output, then we use that (to avoid duplicates).
# but if they were omitted to avoid binary compatibility problems
# then we need to repeat the checks.
#
if $PKG_CONFIG --exists pangoxft ; then
  PANGO_PACKAGES="pangox pangoxft"
else
  PANGO_PACKAGES="pangox"
fi

x_libs="`$PKG_CONFIG --libs $PANGO_PACKAGES`"
case x_libs in
  *-lX11*) pango_omitted_x_deps=no ;;
  *)       pango_omitted_x_deps=yes ;;
esac

if test $pango_omitted_x_deps = yes ; then
  AC_PATH_XTRA

  if test x$no_x = xyes ; then
    AC_MSG_ERROR([X development libraries not found])
  else
    X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
  fi
fi

AC_CHECK_LIB(Xau, XauFileName, [X_LIBS="$X_LIBS -lXau"],
             [AC_MSG_ERROR([
*** Can't find the Xauth library. It is needed to compile gnome-session.])])

AC_CHECK_LIB(Xrandr, XRRUpdateConfiguration,
  [AC_CHECK_HEADER(X11/extensions/Xrandr.h,
     X_LIBS="-lXrandr -lXrender $X_LIBS"
     AC_DEFINE(HAVE_RANDR, 1, [Have the Xrandr extension library]),
	  :, [#include <X11/Xlib.h>])], : ,
       -lXrandr -lXrender $X_LIBS)

AC_SUBST(X_LIBS)

dnl -----------------------------------------------------------

dnl  ------------------
dnl | Language Support |---------------------------------------
dnl  ------------------
GETTEXT_PACKAGE=gnome-session-2.0
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE",
                   [The gettext translation domain])
AC_SUBST(GETTEXT_PACKAGE)

AM_GLIB_GNU_GETTEXT
dnl -----------------------------------------------------------

dnl  -------------------------------
dnl | Headers |--------------------------
dnl  -------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(syslog.h tcpd.h sys/param.h)
dnl -----------------------------------------------------------

dnl  ---------------
dnl | gnome-session |------------------------------------------
dnl  ---------------
dnl

AC_MSG_CHECKING([Whether libgnomeui was built with session management])
case "$GNOME_SESSION_LIBS" in
	*-lSM*)
		GNOME_HAVE_SM=yes
		;;
	*)
		GNOME_HAVE_SM=no
		;;
esac
AC_MSG_RESULT($GNOME_HAVE_SM)
if test "$GNOME_HAVE_SM" = no ; then
	AC_MSG_WARN([Session management support not built into libgnomeui; gnome-session will not be built])
fi
AM_CONDITIONAL(SESSION, test "$GNOME_HAVE_SM" = yes)
dnl -----------------------------------------------------------


dnl  -------------------
dnl | Use TCP Wrappers? |--------------------------------------
dnl  -------------------
AC_MSG_CHECKING(whether to use TCP wrappers)
LIBWRAP_PATH=""
for I in $LDFLAGS $LIBS -L/usr/lib -L/usr/local/lib; do
        case "$I" in
        -L*)
        THEFILE="`echo $I | sed -e 's,^-L,,'`"
        echo "From $I, checking in dir $THEFILE for libwrap.a" 1>&5
        if test -f $THEFILE/libwrap.a; then
                LIBWRAP_PATH="$THEFILE"
                echo "Found in $LIBWRAP_PATH" 1>&5
                break
        fi
	        esac
done
if test -n "$LIBWRAP_PATH"; then
        AC_MSG_RESULT(yes)
else
        AC_MSG_RESULT(no)
fi

if test -n "$LIBWRAP_PATH"; then
        nm $LIBWRAP_PATH/libwrap.* | grep 'T setenv' && LIBWRAP_PATH=""
        if test -z "$LIBWRAP_PATH"; then
                echo "*********************************************************"
                echo " You have a broken TCP wrappers library (setenv included)"
                echo " Please get the latest TCP wrappers package from your OS"
                echo " vendor, or recompile TCP wrappers to not include a"
                echo " setenv() implementation."
                echo
                echo "Not using TCP wrappers after all."
                echo "*********************************************************"
        fi
fi
dnl We need the header files too!
if test "$ac_cv_header_syslog_h" != yes || test "$ac_cv_header_tcpd_h" != yes; then
	echo "Resetting $LIBWRAP_PATH because syslog is $ac_cv_header_syslog_h and tcpd is $ac_cv_header_tcpd_h" 1>&5
	LIBWRAP_PATH=""
fi

dnl find out if we need -lnsl or whatever
LIBWRAP_NSL=
if test -n "$LIBWRAP_PATH"; then
        AC_MSG_CHECKING(whether -lwrap requires -lnsl)
        ORIG_LIBS="$LIBS"
        LIBS="-L$LIBWRAP_PATH -lwrap $LIBS"
        AC_TRY_LINK([
extern int hosts_access;
int allow_severity, deny_severity;
], [return hosts_access;], ,[
dnl try with -lnsl
OLD_LIBS="$LIBS"
LIBS="$LIBS -lnsl"
AC_TRY_LINK([
extern int hosts_access;
int allow_severity, deny_severity;
], [return hosts_access;], LIBWRAP_NSL="-lnsl",
LIBWRAP_PATH="")
LIBS="$OLD_LIBS"
])
        LIBS="$ORIG_LIBS"
if test -n "$LIB_NSL"; then
        AC_MSG_RESULT(yes)
        LIBS="$LIBS $LIB_NSL"
else
        AC_MSG_RESULT(no)
fi
fi
LIBWRAP_LIBS=
if test -n "$LIBWRAP_PATH"; then
	LIBWRAP_LIBS="-L$LIBWRAP_PATH -lwrap $LIBWRAP_NSL"
	AC_DEFINE(HAVE_HOSTS_ACCESS, 1,
                  [Define to true if host_access exists])
fi
AC_SUBST(LIBWRAP_LIBS)
dnl -----------------------------------------------------------



dnl  -------------------------
dnl | Choose a Window Manager |--------------------------------
dnl  -------------------------
AC_ARG_WITH(window-manager,
    AC_HELP_STRING([--with-window-manager=NAME],
                   [Specify default window manager]),
    [WINDOW_MANAGER="$with_window_manager"],
    [dnl gnome-wm is a shell script that starts the WM.
    WINDOW_MANAGER=gnome-wm])
AC_SUBST(WINDOW_MANAGER)
dnl -----------------------------------------------------------


dnl  --------------------------------------------------------
dnl | Solaris does not have IceListenForWellKnownConnections |-
dnl  --------------------------------------------------------
oLIBS="$LIBS"
LIBS="$GNOME_SESSION_LIBS"
AC_CHECK_FUNCS(_IceTransNoListen)
LIBS="$oLIBS"
dnl -----------------------------------------------------------

AC_CHECK_FUNCS(usleep)

dnl ====================================================================
dnl Code for checking whether IPv6 is enabled on the system....
dnl ====================================================================
AC_MSG_CHECKING([whether to enable ipv6])
AC_ARG_ENABLE(ipv6,
              AC_HELP_STRING([--enable-ipv6], [enable IPv6 extensions]),,
              [enable_ipv6=yes])
if test $enable_ipv6 = yes; then

  dnl ====================================================================
  dnl Code for checking presence of AF_INET6 on the system....
  dnl ====================================================================
  AC_TRY_COMPILE([
    #include <sys/types.h>
    #include <sys/socket.h>], [
    socket(AF_INET6, SOCK_STREAM, 0)
    ],
    have_ipv6=yes,
    have_ipv6=no
  )
  AC_MSG_RESULT($have_ipv6)

  dnl =================================================================
  dnl Now we would check for specific function like getaddrinfo.
  dnl =================================================================
  have_getaddrinfo=no
  if test $have_ipv6=yes; then
    AC_CHECK_FUNC(getaddrinfo, have_getaddrinfo=yes)
    if test $have_getaddrinfo != yes; then
      # getaddrinfo is not in the default libraries.  See if it's in some other.
      for lib in bsd socket inet; do
        AC_CHECK_LIB($lib, getaddrinfo, [LIBS="$LIBS -l$lib";have_getaddrinfo=yes; break])
      done
    fi
    if test $have_getaddrinfo=yes; then
      AC_DEFINE(ENABLE_IPV6, 1, [Define if IPV6 is supported])
    fi
  fi
fi
dnl ==============================================================================
dnl End of IPv6 checks
dnl ==============================================================================

dnl Don't use AC_PROG_AWK since we need the full pathname.
AC_PATH_PROGS(AWK, mawk gawk nawk awk, )
AC_PATH_PROGS(PERL, perl5 perl)

dnl define a MAINT-like variable REBUILD which is set if Perl
dnl  and awk are found, so autogenerated sources can be rebuilt
AC_ARG_ENABLE(rebuilds,
              AC_HELP_STRING([--disable-rebuilds],
                             [disable all source autogeneration rules]),,
              [enable_rebuilds=yes])
REBUILD=\#
if test "x$enable_rebuilds" = "xyes" && \
     test -n "$PERL" && \
     $PERL -e 'exit !($] >= 5.002)' > /dev/null 2>&1 && \
     test -n "$AWK" ; then
  REBUILD=
fi
AC_SUBST(REBUILD)

AC_ARG_WITH(rsh-command,
    AC_HELP_STRING([--with-rsh-command=COMMAND],
		   [Specify the command for executing a remote shell]),
    [RSH_COMMAND="$with_rsh_command"],
    [AC_PATH_PROG(RSH_COMMAND, rsh)
    if test x$RSH_COMMAND = x ; then
	AC_MSG_WARN([The rsh command was not found.])
    fi
])
AC_SUBST(RSH_COMMAND)



AC_CONFIG_FILES([
Makefile
gnome-session.spec
gnome-session/Makefile
man/default.session.5
man/gnome-session.1
po/Makefile.in
man/Makefile
])

AC_OUTPUT([
gnome-session/session-properties.desktop.in
])
