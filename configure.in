AC_INIT(panel)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gnome-core, 1.4.0.4)

AM_MAINTAINER_MODE
GNOME_COMMON_INIT


AM_PROG_XML_I18N_TOOLS

dnl
dnl let applications configure for gnome
dnl
gnome_cv_use_gnome=yes

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AC_ARG_PROGRAM
AM_PROG_LIBTOOL
AM_PROG_LEX
AC_PROG_YACC
AC_PATH_PROGS(PATH_TO_XRDB, "xrdb")

GNOME2_COMPILE_WARNINGS

GNOME2_X_CHECKS


dnl ==========================================================================
dnl
dnl Library Dependencies, uses pkg-config to detect correct version, etc
dnl
dnl ==========================================================================


GNOME_REQUIRE_PKGCONFIG

GNOME_PLATFORM_GNOME_2(yes)


dnl If you add a version number here, you *must* add an AC_SUBST line for
dnl it too, or it will never make it into the spec file!

GTK_REQUIRED=1.3.1
GDK_PIXBUF_REQUIRED=1.3.1
LIBGLADE_REQUIRED=0.16
LIBGNOME_REQUIRED=1.96.0
LIBGNOME1COMPAT_REQUIRED=1.96.0
LIBGNOMEUI_REQUIRED=1.96.0
ORBIT_REQUIRED=2.3.90
XML_REQUIRED=2.2.8
LIBCAPPLET_REQUIRED=1.4.0
SCROLLKEEPER_REQUIRED=0.1.4


AC_SUBST(GTK_REQUIRED)
AC_SUBST(GDK_PIXBUF_REQUIRED)
AC_SUBST(LIBGLADE_REQUIRED)
AC_SUBST(LIBGNOME_REQUIRED)
AC_SUBST(LIBGNOME1COMPAT_REQUIRED)
AC_SUBST(ORBIT_REQUIRED)
AC_SUBST(XML_REQUIRED)
AC_SUBST(LIBCAPPLET_REQUIRED)
AC_SUBST(SCROLLKEEPER_REQUIRED)


dnl ================================
dnl | Pkg-Config dependency checks |---------------------------
dnl ================================

  GNOME_PKGCONFIG_CHECK_MODULES(GTK, gtk+-2.0:$GTK_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(GDK_PIXBUF, gdk-pixbuf-2.0:$GDK_PIXBUF_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(GLADE, libglade-2.0:$LIBGLADE_REQUIRED)
    AC_SUBST(GLADE_LIBS)
    AC_SUBST(GLADE_CFLAGS)
  GNOME_PKGCONFIG_CHECK_MODULES(GNOME, libgnome-2.0:$LIBGNOME_REQUIRED)
    AC_SUBST(GNOME_LIBS)
    AC_SUBST(GNOME_CFLAGS)
    AC_SUBST(GNOME_LIBDIR)
  GNOME_PKGCONFIG_CHECK_MODULES(GNOME1COMPAT, libgnome1compat-2.0:$LIBGNOME1COMPAT_REQUIRED)
    AC_SUBST(GNOME1COMPAT_LIBS)
    AC_SUBST(GNOME1COMPAT_CFLAGS)
  GNOME_PKGCONFIG_CHECK_MODULES(GNOMEUI, libgnomeui-2.0:$LIBGNOMEUI_REQUIRED)
    AC_SUBST(GNOMEUI_LIBS)
    AC_SUBST(GNOMEUI_CFLAGS)
  GNOME_PKGCONFIG_CHECK_MODULES(ORBIT, ORBit-2.0:$ORBIT_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(GNOME_XML, libxml-2.0:$XML_REQUIRED)
    AC_SUBST(GNOME_XML_LIBS)
    AC_SUBST(GNOME_XML_CFLAGS)
    GNOME_XML_LIB = "$GNOME_XML_LIBS"
    AC_SUBST(GNOME_XML_LIB)
  GNOME_PKGCONFIG_CHECK_OPTIONAL_MODULES(LIBCAPPLET, libcapplet2.pc:$LIBCAPPLET_REQUIRED)
  GNOME_PKGCONFIG_CHECK_MODULES(LIBGNOMECANVAS, libgnomecanvas-2.0:1.96.0)


dnl -----------------------------------------------------------

dnl  ------------------
dnl | Language Support |---------------------------------------
dnl  ------------------
ALL_LINGUAS="az bg ca cs da de el en_GB es et eu fi fr ga gl hu it ja ko lt lv nl nn no pl pt pt_BR ro ru sk sl sp sr sv ta tr uk wa zh_TW.Big5 zh_CN.GB2312"
AM_GNOME2_GETTEXT
# AM_GNOME_GETTEXT above substs $DATADIRNAME
# this is the directory where the *.{mo,gmo} files are installed
gnomelocaledir='${prefix}/share/locale'
AC_SUBST(gnomelocaledir)
dnl -----------------------------------------------------------


dnl  -------------------------------
dnl | Dynamically Loading Libraries |--------------------------
dnl  -------------------------------
AC_CHECK_HEADERS(dlfcn.h dl.h syslog.h tcpd.h)
AC_CHECK_LIB(dl, dlopen, DL_LIB="-ldl",[
AC_CHECK_LIB(dld, shl_load, DL_LIB="-ldld",[
AC_CHECK_FUNCS(dlopen, DL_LIB="",
AC_MSG_ERROR(Dynamic linking is not available on this platform.  Some
apps, like panel, will not run properly.))
])])
AC_SUBST(DL_LIB)
dnl -----------------------------------------------------------


for dir in `(IFS=:; for i in $PATH; do echo $i ; done)` ; do
  if test -f $dir/orbit-idl ; then
     orbit_prefix=`echo $dir | sed 's%/bin$%%' |sed 's%/bin/$%%'`
     break
  fi
done

ORB_LIBS="$ORBIT_LIBS"
ORB_CFLAGS="$ORBIT_CFLAGS"

AC_SUBST(ORB_LIBS)
AC_SUBST(ORB_CFLAGS)
AC_SUBST(ORBIT_REQUIRED)

AC_SUBST(PIXBUF_CFLAGS)
AC_SUBST(PIXBUF_LIBS)

AC_SUBST(CANVAS_PIXBUF_CFLAGS)
AC_SUBST(CANVAS_PIXBUF_LIBS)



dnl  ----------------------
dnl | Configure Easter Egg |-----------------------------------
dnl  ----------------------
AC_MSG_CHECKING(for Configure Easter Egg version >= 6.38)
AC_MSG_RESULT(found)
dnl -----------------------------------------------------------


dnl  ----------------
dnl | Gnome Terminal |-----------------------------------------
dnl  ----------------
dnl ZVT_LIBS=`$GNOME_CONFIG --libs zvt`
dnl AC_SUBST(ZVT_LIBS)
dnl 
dnl GT_LIBS="libglade zvt gnorba gnomeui"
dnl GNOME_TERMINAL_LIBS=`gnome-config --libs $GT_LIBS`
dnl GNOME_TERMINAL_CFLAGS=`gnome-config --cflags $GT_LIBS`
dnl AC_SUBST(GNOME_TERMINAL_LIBS)
dnl AC_SUBST(GNOME_TERMINAL_CFLAGS)
dnl AC_SUBST(LIBGLADE_REQUIRED)
dnl -----------------------------------------------------------


dnl  ----------
dnl | libglade |-----------------------------------------------
dnl  ----------
dnl GLADE_LIBS=`gnome-config --libs libglade`
dnl GLADE_CFLAGS=`gnome-config --cflags libglade`
dnl AC_SUBST(GLADE_LIBS)
dnl AC_SUBST(GLADE_CFLAGS)
dnl -----------------------------------------------------------


dnl  --------
dnl | libpng |-------------------------------------------------
dnl  --------
PNG_LIBS=
AC_CHECK_LIB(png, png_init_io, [
	     PNG_LIBS="-lpng"],[
	     AC_MSG_ERROR(libpng is required for gnome-core)])
AC_SUBST(PNG_LIBS)
dnl -----------------------------------------------------------


dnl  ---------------
dnl | gnome-session |------------------------------------------
dnl  ---------------
dnl $GNOME_HAVE_SM comes from GNOME_X_CHECKS
AM_CONDITIONAL(SESSION, test "$GNOME_HAVE_SM" = true)
dnl -----------------------------------------------------------


dnl  -------------------
dnl | Use TCP Wrappers? |--------------------------------------
dnl  -------------------
AC_MSG_CHECKING("whether to use TCP wrappers")
LIBWRAP_PATH=""
for I in $LDFLAGS $LIBS -L/usr/lib -L/usr/local/lib; do
        case "$I" in
        -L*)
        THEFILE="`echo $I | sed -e 's,^-L,,'`"
        echo "From $I, checking in dir $THEFILE for libwrap.a" 1>&5
        if test -f $THEFILE/libwrap.a; then
                LIBWRAP_PATH="$THEFILE"
                echo "Found in $LIBWRAP_PATH" 1>&5
                break
        fi
	        esac
done
if test -n "$LIBWRAP_PATH"; then
        AC_MSG_RESULT(yes)
else
        AC_MSG_RESULT(no)
fi

if test -n "$LIBWRAP_PATH"; then
        nm $LIBWRAP_PATH/libwrap.* | grep 'T setenv' && LIBWRAP_PATH=""
        if test -z "$LIBWRAP_PATH"; then
                echo "*********************************************************"
                echo " You have a broken TCP wrappers library (setenv included)"
                echo " Please get the latest TCP wrappers package from your OS"
                echo " vendor, or recompile TCP wrappers to not include a"
                echo " setenv() implementation."
                echo
                echo "Not using TCP wrappers after all."
                echo "*********************************************************"
        fi
fi
dnl We need the header files too!
if test "$ac_cv_header_syslog_h" != yes || test "$ac_cv_header_tcpd_h" != yes; then
	echo "Resetting $LIBWRAP_PATH because syslog is $ac_cv_header_syslog_h and tcpd is $ac_cv_header_tcpd_h" 1>&5
	LIBWRAP_PATH=""
fi

dnl find out if we need -lnsl or whatever
LIBWRAP_NSL=
if test -n "$LIBWRAP_PATH"; then
        AC_MSG_CHECKING(whether -lwrap requires -lnsl)
        ORIG_LIBS="$LIBS"
        LIBS="-L$LIBWRAP_PATH -lwrap $LIBS"
        AC_TRY_LINK([
extern int hosts_access;
int allow_severity, deny_severity;
], [return hosts_access;], ,[
dnl try with -lnsl
OLD_LIBS="$LIBS"
LIBS="$LIBS -lnsl"
AC_TRY_LINK([
extern int hosts_access;
int allow_severity, deny_severity;
], [return hosts_access;], LIBWRAP_NSL="-lnsl",
LIBWRAP_PATH="")
LIBS="$OLD_LIBS"
])
        LIBS="$ORIG_LIBS"
if test -n "$LIB_NSL"; then
        AC_MSG_RESULT(yes)
        LIBS="$LIBS $LIB_NSL"
else
        AC_MSG_RESULT(no)
fi
fi
LIBWRAP_LIBS=
if test -n "$LIBWRAP_PATH"; then
	LIBWRAP_LIBS="-L$LIBWRAP_PATH -lwrap $LIBWRAP_NSL"
	AC_DEFINE(HAVE_HOSTS_ACCESS)
fi
AC_SUBST(LIBWRAP_LIBS)
dnl -----------------------------------------------------------



dnl  -------------------------
dnl | Choose a Window Manager |--------------------------------
dnl  -------------------------
AC_ARG_WITH(window-manager,
[  --with-window-manager=NAME
			  Specify default window manager],[
    WINDOW_MANAGER="$with_window_manager"], [
    dnl gnome-wm is a shell script that starts the WM.
    WINDOW_MANAGER=gnome-wm])
AC_SUBST(WINDOW_MANAGER)
dnl -----------------------------------------------------------



dnl  ------------------------
dnl | X11 Xinerama extension |---------------------------------
dnl  ------------------------
AC_ARG_ENABLE(xinerama,
  [  --disable-xinerama      Disable Xinerama support],,
  with_xinerama=yes)
XINERAMA_LIBS=
if test x$with_xinerama != xno ; then
	AC_CHECK_HEADER(X11/extensions/Xinerama.h, [
		AC_CHECK_LIB(Xinerama, XineramaQueryScreens, [
		     	AC_DEFINE(HAVE_LIBXINERAMA)
		     	XINERAMA_LIBS="-lXinerama"
		     	XINERAMA_SUPPORT=yes],, $GTK_LIBS)
	])
fi
AC_SUBST(XINERAMA_LIBS)
dnl -----------------------------------------------------------



dnl  ------------------
dnl | Tienes gtkhtml? |----------------------------------------
dnl  ------------------
dnl help-browser using gtkhtml
AC_ARG_WITH(gtkhtml,
[  --with-gtkhtml=PREFIX   Specify gtkhtml prefix],[
    GTK_HTML_PREFIX="$with_gtkhtml"], [
    GTK_HTML_PREFIX=`$GNOME_CONFIG --prefix`])
AC_SUBST(GTK_HTML_PREFIX)

dnl help-browser using gtkhtml and/or general gnome-print usage
dnl for general use we don't use the prefix but we use it to disable
dnl gnome-print
AC_ARG_WITH(gnome-print,
[  --with-gnome-print=PREFIX
                          Specify gnome-print prefix],[
    GNOME_PRINT_PREFIX="$with_gnome_print"], [
    GNOME_PRINT_PREFIX=`$GNOME_CONFIG --prefix`])
AC_SUBST(GNOME_PRINT_PREFIX)

help_use_gtkhtml=false

CPPFLAGS_save=$CPPFLAGS
LDFLAGS_save=$LDFLAGS
CPPFLAGS=`$GNOME_CONFIG --cflags gtkhtml`
LDFLAGS=`$GNOME_CONFIG --libs gtkhtml`

lib_gtkhtml=false
AC_CHECK_LIB(gtkhtml, gtk_html_construct, lib_gtkhtml=true, [
	AC_MSG_WARN([Recent enough GtkHTML library not found (using GtkXmHTML)
	])
])

CPPFLAGS=$CPPFLAGS_save
LDFLAGS=$LDFLAGS_save

dnl this shouldn't be enabled by default yet, since gtkhtml has some bugs
AC_ARG_ENABLE(gtkhtml-help, [  --enable-gtkhtml-help   Use GtkHTML for the help browser],
	gtkhtml_enabled="$enableval", gtkhtml_enabled=no)

if test "x$gtkhtml_enabled" = "xyes" ; then
	if test "x$lib_gtkhtml" = "xtrue" ; then
		AC_MSG_CHECKING(for static libgtkhtml)
		if test -e $GTK_HTML_PREFIX/lib/libgtkhtml.a ; then
			AC_MSG_RESULT(yes)
			AC_MSG_CHECKING(for static libgnomeprint)
			if test -e $GNOME_PRINT_PREFIX/lib/libgnomeprint.a ; then
				AC_MSG_RESULT(yes)
				help_use_gtkhtml=true
			else
				AC_MSG_RESULT(no)
			fi
		else
			AC_MSG_RESULT(no)
		fi
	fi
fi

AC_MSG_CHECKING(which HTML widget to use)
if test "x$help_use_gtkhtml" = "xtrue" ; then
	AC_MSG_RESULT(GtkHTML)
else
	AC_MSG_RESULT(GtkXmHTML)
fi

AM_CONDITIONAL(HELP_USE_GTKHTML, test x$help_use_gtkhtml = xtrue)
dnl AC_SUBST(HELP_USE_GTKHTML)
dnl -----------------------------------------------------------


dnl help-browser
dnl I found `inet_aton' in -lresolv on solaris
oLIBS="$LIBS"
RES_LIBS=
# the following two are covered by X11 too.  If inet_aton is found in
# plain libc, -lsocket or -lnsl, RES_LIBS will be empty.
AC_CHECK_FUNC(connect,,[AC_CHECK_LIB(socket,connect)])
AC_CHECK_FUNC(gethostbyname,,[AC_CHECK_LIB(nsl,gethostbyname)])
AC_CHECK_FUNC(inet_aton,,[AC_CHECK_LIB(resolv,inet_aton,RES_LIBS="-lresolv")])
AC_SUBST(RES_LIBS)
LIBS="$oLIBS"

dnl
dnl Check for zvt_term_reset and del_is_del
dnl
oLIBS="$LIBS"
LIBS="$GNOMEUI_LIBS $GNOME_LIBDIR $ZVT_LIBS"
AC_CHECK_FUNC(zvt_term_reset,[AC_DEFINE(HAVE_ZVT_TERM_RESET)])
AC_CHECK_FUNC(zvt_term_set_del_is_del,[AC_DEFINE(HAVE_ZVT_DEL_IS_DEL)])
LIBS="$oLIBS"

dnl  ------------------
dnl | Check for libbz2 |---------------------------------------
dnl  ------------------
oLIBS="$LIBS"
BZ_LIBS=""
AC_CHECK_LIB(bz2, bzopen, [
	AC_DEFINE(HAVE_LIBBZ2)
	LIBS=$oLIBS
	BZ_LIBS="-lbz2"
	], AC_CHECK_LIB(bz2, BZ2_bzopen, [
	   AC_DEFINE(HAVE_LIBBZ2)
	   AC_DEFINE(HAVE_LIBBZ2_1_0)
	   LIBS=$oLIBS
	   BZ_LIBS="-lbz2"
	   ], AC_MSG_WARN([Recent enough BZ2 library not found. Help-Browser will not be able to read bzipped man/info pages])
))
AC_SUBST(BZ_LIBS)
dnl -----------------------------------------------------------

dnl  -----------------------------
dnl | Place to look for KDE menus |----------------------------
dnl  -----------------------------
AC_ARG_WITH(kde-datadir, [  --with-kde-datadir=DIR  Location of KDE data])

if test "x$with_kde_datadir" = x ; then
  kde_datadir=/usr/share
else
  kde_datadir=$with_kde_datadir
fi

AC_DEFINE_UNQUOTED(KDE_MENUDIR, "$kde_datadir/applnk")
AC_DEFINE_UNQUOTED(KDE_ICONDIR, "$kde_datadir/icons")
AC_DEFINE_UNQUOTED(KDE_MINI_ICONDIR, "$kde_datadir/icons/mini")
dnl -----------------------------------------------------------


dnl  ----------------------------
dnl | Place to look for KDE docs |-----------------------------
dnl  ----------------------------
AC_ARG_WITH(kde-docdir, [  --with-kde-docdir=DIR   Location of KDE documentation])

if test "x$with_kde_docdir" = x ; then
  kde_docdir=/usr/doc/kde
else
  kde_docdir=$with_kde_docdir
fi

AC_DEFINE_UNQUOTED(KDE_DOCDIR, "$kde_docdir")
dnl -----------------------------------------------------------


dnl  --------------
dnl | ScrollKeeper |-------------------------------------------
dnl  --------------
AC_PATH_PROG(SCROLLKEEPER_CONFIG, scrollkeeper-config,no)
if test x$SCROLLKEEPER_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find scrollkeeper-config, please install the scrollkeeper packaga)
fi
AC_SUBST(SCROLLKEEPER_REQUIRED)
dnl -----------------------------------------------------------

dnl AC_CONFIG_SUBDIRS(gemvt)

dnl  ---------------
dnl | gtk-doc stuff |------------------------------------------
dnl  ---------------

AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)
AM_CONDITIONAL(HAVE_GTK_DOC, $GTKDOC)
AC_SUBST(HAVE_GTK_DOC)

dnl Let people disable the gtk-doc stuff.
AC_ARG_ENABLE(gtk-doc, [  --enable-gtk-doc        Use gtk-doc to build documentation [default=auto]], enable_gtk_doc="$enableval", enable_gtk_doc=auto)

if test x$enable_gtk_doc = xauto ; then
  if test x$GTKDOC = xtrue ; then
    enable_gtk_doc=yes
  else
    enable_gtk_doc=no
  fi
fi
dnl NOTE: We need to use a separate automake conditional for this
dnl       to make this work with the tarballs.
AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)
dnl -----------------------------------------------------------


dnl  --------------------------------------------------------
dnl | Solaris does not have IceListenForWellKnownConnections |-
dnl  --------------------------------------------------------
oLIBS="$LIBS"
LIBS="$GNOMEUI_LIBS $GNOME_LIBDIR"
AC_CHECK_FUNCS(_IceTransNoListen)
LIBS="$oLIBS"
dnl -----------------------------------------------------------


dnl  ------------------------
dnl | HACK to expand datadir |---------------------------------
dnl  ------------------------
ICONDIR=`eval echo "${datadir}/pixmaps"`
AC_DEFINE_UNQUOTED(GNOME_ICONDIR,"${ICONDIR}")
dnl -----------------------------------------------------------


dnl  -------------
dnl | Build Flags |--------------------------------------------
dnl  -------------
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
dnl -----------------------------------------------------------



AC_OUTPUT([
Makefile
gnome-core.spec
po/Makefile.in
panel/Makefile
panel/config/Makefile
panel/doc/Makefile
panel/help/Makefile
panel/help/C/Makefile
panel/help/de/Makefile
panel/help/it/Makefile
panel/help/ja/Makefile
applets/Makefile
applets/applet-dirs/Makefile
applets/gen_util/Makefile
applets/gen_util/help/Makefile
applets/gen_util/help/C/Makefile
applets/gen_util/help/C/clock/Makefile
applets/gen_util/help/C/mailcheck/Makefile
applets/gen_util/help/C/printer/Makefile
applets/gen_util/help/de/Makefile
applets/gen_util/help/no/Makefile
applets/gen_util/help/da/Makefile
applets/gen_util/help/da/clock/Makefile
applets/gen_util/help/da/mailcheck/Makefile
applets/gen_util/help/da/printer/Makefile
applets/gen_util/help/es/Makefile
applets/gen_util/help/es/printer/Makefile
applets/gen_util/help/it/Makefile
applets/gen_util/help/it/clock/Makefile
applets/gen_util/help/it/mailcheck/Makefile
applets/gen_util/help/it/printer/Makefile
applets/fish/Makefile
applets/fish/help/Makefile
applets/fish/help/C/Makefile
applets/fish/help/no/Makefile
applets/fish/help/da/Makefile
applets/fish/help/it/Makefile
applets/desk-guide/Makefile
applets/desk-guide/help/Makefile
applets/desk-guide/help/C/Makefile
applets/desk-guide/help/de/Makefile
applets/desk-guide/help/it/Makefile
applets/tasklist/Makefile
applets/tasklist/help/Makefile
applets/tasklist/help/C/Makefile
core-docs/Makefile
core-docs/fdl/Makefile
core-docs/fdl/C/Makefile
core-docs/gpl/Makefile
core-docs/gpl/C/Makefile
core-docs/lgpl/Makefile
core-docs/lgpl/C/Makefile
core-docs/gnome-feedback/Makefile
core-docs/gnome-feedback/C/Makefile
desktop-links/Makefile
gnome-terminal/Makefile
gnome-terminal/C/Makefile
gnome-terminal/de/Makefile
gnome-terminal/da/Makefile
gnome-terminal/es/Makefile
gnome-terminal/it/Makefile
gnome-terminal/no/Makefile
help-browser/Makefile
help-browser/gnome-man2html/Makefile
help-browser/gnome-info2html/Makefile
help-browser/help/Makefile
help-browser/help/C/Makefile
help-browser/help/ca/Makefile
help-browser/help/da/Makefile
help-browser/help/el/Makefile
help-browser/help/es/Makefile
help-browser/help/et/Makefile
help-browser/help/eu/Makefile
help-browser/help/hu/Makefile
help-browser/help/fr/Makefile
help-browser/help/gl/Makefile
help-browser/help/it/Makefile
help-browser/help/ja/Makefile
help-browser/help/ko/Makefile
help-browser/help/lt/Makefile
help-browser/help/no/Makefile
help-browser/help/uk/Makefile
help-browser/help/wa/Makefile
gnome-hint/Makefile
gnome-about/Makefile
gmenu/Makefile
gnome-edit/Makefile
idl/Makefile
pixmaps/Makefile
gsm/Makefile
gsm/help/Makefile
gsm/help/C/Makefile
gsm/help/ja/Makefile
gsm/default.session.5
gsm/gnome-session.1
smproxy/Makefile
intl/Makefile
omf-install/Makefile])
