AC_INIT(gnome-session)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gnome-session, 2.2.0.2)

AM_MAINTAINER_MODE

AC_PROG_INTLTOOL

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AC_ARG_PROGRAM
AM_PROG_LIBTOOL
AC_PATH_PROGS(PATH_TO_XRDB, "xrdb")
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

dnl with higher autotools, we can set ACLOCAL_AMFLAGS instead, which is
dnl the better solution; this does the trick for automake-1.4
dnl gnome-autogen.sh sets ACLOCAL_FLAGS, which points to the cvs gnome
dnl autoconf macros
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

GNOME_COMPILE_WARNINGS(yes)

dnl If you add a version number here, you *must* add an AC_SUBST line for
dnl it too, or it will never make it into the spec file!

ESOUND_REQUIRED=0.2.26
LIBGNOMEUI_REQUIRED=2.0.0
GTK_REQUIRED=2.1.0

AC_SUBST(ESOUND_REQUIRED)
AC_SUBST(LIBGNOMEUI_REQUIRED)

dnl pkg-config dependency checks

dnl We first check for esound and audiofile (which has conditional
dnl support built in)

ESOUND_MODULE="esound >= $ESOUND_REQUIRED"
PKG_CHECK_MODULES(SOUND_TEST, $ESOUND_MODULE, [
	AC_DEFINE(HAVE_ESD)
],[
	ESOUND_MODULE=""
])

PKG_CHECK_MODULES(GNOME_SESSION, gtk+-2.0 >= $GTK_REQUIRED libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED $ESOUND_MODULE)
AC_SUBST(GNOME_SESSION_CFLAGS)
AC_SUBST(GNOME_SESSION_LIBS)

PKG_CHECK_MODULES(SMPROXY, libgnome-2.0)
AC_SUBST(SMPROXY_LIBS)

dnl gconf checks
AC_PATH_PROG(GCONFTOOL, gconftool-2, no)

if test x"$GCONFTOOL" = xno; then
  AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
fi

AM_GCONF_SOURCE_2

# gconf-sanity-check
GCONF_SERVERDIR=`$PKG_CONFIG --variable=gconf_serverdir gconf-2.0`
old_path=$PATH
if test x"$GCONF_SERVERDIR" != x; then
   PATH=$GCONF_SERVERDIR:$PATH
fi

AC_PATH_PROG(GCONF_SANITY_CHECK, gconf-sanity-check-2, no)
if test x"$GCONF_SANITY_CHECK" = xno; then
  AC_MSG_ERROR([gconf-sanity-check-2 executable not found in your path - should be installed with GConf])
fi

AC_SUBST(GCONF_SANITY_CHECK)
PATH=$old_path

# esd
ESDSERVERDIR=`$PKG_CONFIG --variable=esd_serverdir esound`
old_path=$PATH
if test x"$ESDSERVERDIR" != x; then
   PATH=$ESDSERVERDIR:$PATH
fi

AC_PATH_PROG(ESD_SERVER, esd, no)
if test x"$ESD_SERVER" = xno; then
  AC_MSG_ERROR([esd executable not found in your path - should be installed with ESound])
fi

AC_SUBST(ESD_SERVER)
PATH=$old_path

dnl X development libraries check

#
# If Pango included the shared library dependencies from X11 in
# the pkg-config output, then we use that (to avoid duplicates).
# but if they were omitted to avoid binary compatibility problems
# then we need to repeat the checks.
#
if $PKG_CONFIG --exists pangoxft ; then
  PANGO_PACKAGES="pangox pangoxft"
else
  PANGO_PACKAGES="pangox"
fi

x_libs="`$PKG_CONFIG --libs $PANGO_PACKAGES`"
case x_libs in
  *-lX11*) pango_omitted_x_deps=no ;;
  *)       pango_omitted_x_deps=yes ;;
esac

if test $pango_omitted_x_deps = yes ; then
  AC_PATH_XTRA

  if test x$no_x = xyes ; then
    AC_MSG_ERROR([X development libraries not found])
  else
    X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS"
  fi
fi

AC_SUBST(X_LIBS)

dnl -----------------------------------------------------------

dnl  ------------------
dnl | Language Support |---------------------------------------
dnl  ------------------
GETTEXT_PACKAGE=gnome-session-2.0
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE")
AC_SUBST(GETTEXT_PACKAGE)

ALL_LINGUAS="am ar az be bg bs ca cs da de el en_GB es et eu fi fr ga gl he hi hu id it ja kn ko lt lv mk mn ms nl nn no pl pt pt_BR ro ru sk sl sp sq sr sv ta tr uk vi wa zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT
dnl -----------------------------------------------------------

dnl  -------------------------------
dnl | Headers |--------------------------
dnl  -------------------------------
AC_CHECK_HEADERS(syslog.h tcpd.h)
dnl -----------------------------------------------------------

dnl  ---------------
dnl | gnome-session |------------------------------------------
dnl  ---------------
dnl

AC_MSG_CHECKING([Whether libgnomeui was built with session management])
case "$GNOME_SESSION_LIBS" in
	*-lSM*)
		GNOME_HAVE_SM=yes
		;;
	*)
		GNOME_HAVE_SM=no
		;;
esac
AC_MSG_RESULT($GNOME_HAVE_SM)
if test "$GNOME_HAVE_SM" = no ; then
	AC_MSG_WARN([Session management support not built into libgnomeui; gnome-session will not be built])
fi
AM_CONDITIONAL(SESSION, test "$GNOME_HAVE_SM" = yes)
dnl -----------------------------------------------------------


dnl  -------------------
dnl | Use TCP Wrappers? |--------------------------------------
dnl  -------------------
AC_MSG_CHECKING(whether to use TCP wrappers)
LIBWRAP_PATH=""
for I in $LDFLAGS $LIBS -L/usr/lib -L/usr/local/lib; do
        case "$I" in
        -L*)
        THEFILE="`echo $I | sed -e 's,^-L,,'`"
        echo "From $I, checking in dir $THEFILE for libwrap.a" 1>&5
        if test -f $THEFILE/libwrap.a; then
                LIBWRAP_PATH="$THEFILE"
                echo "Found in $LIBWRAP_PATH" 1>&5
                break
        fi
	        esac
done
if test -n "$LIBWRAP_PATH"; then
        AC_MSG_RESULT(yes)
else
        AC_MSG_RESULT(no)
fi

if test -n "$LIBWRAP_PATH"; then
        nm $LIBWRAP_PATH/libwrap.* | grep 'T setenv' && LIBWRAP_PATH=""
        if test -z "$LIBWRAP_PATH"; then
                echo "*********************************************************"
                echo " You have a broken TCP wrappers library (setenv included)"
                echo " Please get the latest TCP wrappers package from your OS"
                echo " vendor, or recompile TCP wrappers to not include a"
                echo " setenv() implementation."
                echo
                echo "Not using TCP wrappers after all."
                echo "*********************************************************"
        fi
fi
dnl We need the header files too!
if test "$ac_cv_header_syslog_h" != yes || test "$ac_cv_header_tcpd_h" != yes; then
	echo "Resetting $LIBWRAP_PATH because syslog is $ac_cv_header_syslog_h and tcpd is $ac_cv_header_tcpd_h" 1>&5
	LIBWRAP_PATH=""
fi

dnl find out if we need -lnsl or whatever
LIBWRAP_NSL=
if test -n "$LIBWRAP_PATH"; then
        AC_MSG_CHECKING(whether -lwrap requires -lnsl)
        ORIG_LIBS="$LIBS"
        LIBS="-L$LIBWRAP_PATH -lwrap $LIBS"
        AC_TRY_LINK([
extern int hosts_access;
int allow_severity, deny_severity;
], [return hosts_access;], ,[
dnl try with -lnsl
OLD_LIBS="$LIBS"
LIBS="$LIBS -lnsl"
AC_TRY_LINK([
extern int hosts_access;
int allow_severity, deny_severity;
], [return hosts_access;], LIBWRAP_NSL="-lnsl",
LIBWRAP_PATH="")
LIBS="$OLD_LIBS"
])
        LIBS="$ORIG_LIBS"
if test -n "$LIB_NSL"; then
        AC_MSG_RESULT(yes)
        LIBS="$LIBS $LIB_NSL"
else
        AC_MSG_RESULT(no)
fi
fi
LIBWRAP_LIBS=
if test -n "$LIBWRAP_PATH"; then
	LIBWRAP_LIBS="-L$LIBWRAP_PATH -lwrap $LIBWRAP_NSL"
	AC_DEFINE(HAVE_HOSTS_ACCESS)
fi
AC_SUBST(LIBWRAP_LIBS)
dnl -----------------------------------------------------------



dnl  -------------------------
dnl | Choose a Window Manager |--------------------------------
dnl  -------------------------
AC_ARG_WITH(window-manager,
[  --with-window-manager=NAME
			  Specify default window manager],[
    WINDOW_MANAGER="$with_window_manager"], [
    dnl gnome-wm is a shell script that starts the WM.
    WINDOW_MANAGER=gnome-wm])
AC_SUBST(WINDOW_MANAGER)
dnl -----------------------------------------------------------


dnl  --------------------------------------------------------
dnl | Solaris does not have IceListenForWellKnownConnections |-
dnl  --------------------------------------------------------
oLIBS="$LIBS"
LIBS="$GNOME_SESSION_LIBS"
AC_CHECK_FUNCS(_IceTransNoListen)
LIBS="$oLIBS"
dnl -----------------------------------------------------------

AC_CHECK_FUNCS(usleep)

dnl Build Flags

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)


dnl Don't use AC_PROG_AWK since we need the full pathname.
AC_PATH_PROGS(AWK, mawk gawk nawk awk, )
AC_PATH_PROGS(PERL, perl5 perl)

dnl define a MAINT-like variable REBUILD which is set if Perl
dnl  and awk are found, so autogenerated sources can be rebuilt
AC_ARG_ENABLE(rebuilds, [  --disable-rebuilds      disable all source autogeneration rules],,enable_rebuilds=yes)
REBUILD=\#
if test "x$enable_rebuilds" = "xyes" && \
     test -n "$PERL" && \
     $PERL -e 'exit !($] >= 5.002)' > /dev/null 2>&1 && \
     test -n "$AWK" ; then
  REBUILD=
fi
AC_SUBST(REBUILD)

dnl find the commands to use for rebooting/halting the system
AC_ARG_WITH(reboot-command,
[  --with-reboot-command=COMMAND
			  Specify the command for rebooting the system],[
    REBOOT_COMMAND="$with_reboot_command"], [
    AC_PATH_PROGS(REBOOT_COMMAND, reboot)
    if test x$REBOOT_COMMAND = x ; then
	AC_MSG_WARN([The reboot command was not found. Restarting from the logout dialog will be disabled.])
    fi
])
AC_SUBST(REBOOT_COMMAND)

AC_ARG_WITH(halt-command,
[  --with-halt-command=COMMAND
			  Specify the command for halting the system],[
    HALT_COMMAND="$with_halt_command"], [
    AC_PATH_PROGS(HALT_COMMAND, [poweroff halt])
    if test x$HALT_COMMAND = x ; then
	AC_MSG_WARN([The halt command was not found. Shutting down from the logout dialog will be disabled.])
    fi
])
AC_SUBST(HALT_COMMAND)

AC_ARG_WITH(rsh-command,
[  --with-rsh-command=COMMAND
			  Specify the command for executing a remote shell],[
    RSH_COMMAND="$with_rsh_command"], [
    AC_PATH_PROG(RSH_COMMAND, rsh)
    if test x$RSH_COMMAND = x ; then
	AC_MSG_WARN([The rsh command was not found.])
    fi
])
AC_SUBST(RSH_COMMAND)



AC_OUTPUT([
Makefile
gnome-session.spec
gnome-session/Makefile
man/default.session.5
man/gnome-session.1
gnome-session/gnome-session.schemas.in
po/Makefile.in
smproxy/Makefile
omf-install/Makefile
man/Makefile
])
